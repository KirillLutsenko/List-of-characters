{"version":3,"sources":["Types.jsx","components/Personage/Personage.jsx","components/PersonagesList/PersonagesList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PersonageComments/PersonageComments.jsx","App.jsx","api/api.js","index.js"],"names":["PropTypes","arrayOf","shape","name","string","isRequired","birth__year","func","Personage","birthYear","onPersonageSelected","selectedPersonage","className","type","classnames","onClick","PersonagesList","personages","length","map","personage","birth_year","NewCommentForm","addComment","closeComments","useState","comment","setComment","onSubmit","event","preventDefault","placeholder","value","onChange","target","rows","cols","disabled","PersonageComments","comments","setComments","index","push","App","setPersonages","setSelectedPersonage","useEffect","fetch","then","result","json","catch","err","alert","message","response","results","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a05aa14.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const PersonagesType = {\n  personages: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    birth__year: PropTypes.string,\n  })),\n  selectedPersonage: PropTypes.string.isRequired,\n  onPersonageSelected: PropTypes.func.isRequired,\n};\n\nexport const PersonageCommentsType = {\n  selectedPersonage: PropTypes.func.isRequired,\n  closeComments: PropTypes.func.isRequired,\n}.isRequired;\n\nexport const NewCommentFormType = {\n  addComment: PropTypes.func.isRequired,\n  closeComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { PersonagesType } from '../../Types';\n\nexport const Personage = ({\n  name,\n  birthYear,\n  onPersonageSelected,\n  selectedPersonage,\n}) => (\n  <tr\n    className=\"personages__table-row\"\n  >\n    <td className=\"personages__table-item\">\n      {name}\n    </td>\n\n    <td className=\"personages__table-item\">\n      {birthYear}\n    </td>\n\n    <td className=\"personages__table-item\">\n      <button\n        type=\"submit\"\n        className={classnames(\n          'personages__button button',\n          { 'personages__button button button--active': selectedPersonage\n            === name },\n        )}\n        onClick={() => onPersonageSelected(name)}\n      >\n        Comments\n      </button>\n    </td>\n  </tr>\n);\n\nPersonage.propTypes = PersonagesType;\n","import React from 'react';\nimport { PersonagesType } from '../../Types';\nimport { Personage } from '../Personage/Personage';\nimport './PersonagesList.scss';\n\nexport const PersonagesList = ({\n  personages,\n  selectedPersonage,\n  onPersonageSelected,\n}) => (\n  <>\n    {(personages.length === 0) ? (\n      <div className=\"personages__empty\"></div>\n    ) : (\n      <table className=\"app__pesonages personages\">\n        <thead className=\"personages__header-block\">\n          <tr>\n            <th className=\"personages__header-item\">Name</th>\n            <th className=\"personages__header-item\">Year of birth</th>\n            <th className=\"personages__header-item\">Add comment</th>\n          </tr>\n        </thead>\n\n        <tbody className=\"personages__personages-list\">\n          {personages.map(personage => (\n            <Personage\n              key={`${personage.name}${personage.birthYear}`}\n              name={personage.name}\n              birthYear={personage.birth_year}\n              onPersonageSelected={onPersonageSelected}\n              selectedPersonage={selectedPersonage}\n            />\n          ))}\n        </tbody>\n      </table>\n    )}\n  </>\n);\n\nPersonagesList.propTypes = PersonagesType;\n","import React, { useState } from 'react';\nimport { NewCommentFormType } from '../../Types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ addComment, closeComments }) => {\n  const [comment, setComment] = useState('');\n\n  const resetForm = () => {\n    setComment('');\n  };\n\n  const commentHandleChange = (event) => {\n    const { value } = event.target;\n\n    setComment(value);\n  };\n\n  return (\n    <>\n      <form\n        className=\"comments__comment-form comment-form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          addComment(comment);\n          resetForm();\n        }}\n      >\n        <textarea\n          name=\"comment\"\n          placeholder=\"Type comment here\"\n          className=\"comment-form__input\"\n          value={comment}\n          onChange={commentHandleChange}\n          rows='6'\n          cols='40'\n        />\n\n        <div className=\"comment-form__buttons\">\n          {comment.length === 0 ? (\n            <button\n              type=\"submit\"\n              className=\"comment-form__submit-button button button--disabled\"\n              disabled\n            >\n              Add a comment\n            </button>\n          ) : (\n            <button\n              type=\"submit\"\n              className=\"comment-form__submit-button button\"\n            >\n              Add a comment\n            </button>\n          )}\n\n          <button\n            className=\"comment-form__close-button button\"\n            type=\"button\"\n            onClick={closeComments}\n          >\n            Hide comments\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nNewCommentForm.propTypes = NewCommentFormType;\n","/* eslint-disable react/no-array-index-key */\nimport React, { useState } from 'react';\nimport { PersonageCommentsType } from '../../Types';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport './PersonageComments.scss';\n\nexport const PersonageComments = ({ selectedPersonage, closeComments }) => {\n  const [comments, setComments] = useState({});\n\n  const addComment = (comment) => {\n    if (!comments[selectedPersonage]) {\n      comments[selectedPersonage] = [];\n    }\n\n    setComments({\n      ...comments,\n      [comments[selectedPersonage]]: comments[selectedPersonage].push(comment)\n    });\n  }\n\n  return (\n    <>\n      {selectedPersonage && (\n        <div className=\"app__comments comments\">\n          {comments[selectedPersonage]\n            ? (\n              <>\n                <h2 className=\"comments__title\">\n                  Comments:\n                </h2>\n\n                <div className=\"comments__list list\">\n                  <ol type=\"1\">\n                    {comments[selectedPersonage].map((comment, index) => (\n                      <li\n                        className=\"list__item\"\n                        key={`${comment}${index}`}\n                      >\n                        {comment}\n                      </li>\n                    ))}\n                  </ol>\n                </div>\n              </>\n            ) : (\n              <>\n                <h2 className=\"comments__title\">\n                  Comments:\n                </h2>\n\n                <span className=\"comments__empty\">No comments</span>\n              </>\n            )\n          }\n\n          <NewCommentForm\n            addComment={addComment}\n            closeComments={closeComments}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nPersonageComments.propTypes = PersonageCommentsType;\n","import React, { useEffect, useState } from 'react';\nimport { getPersonages } from './api/api';\nimport { PersonagesList } from './components/PersonagesList/PersonagesList';\nimport { PersonageComments }\n  from './components/PersonageComments/PersonageComments';\nimport './App.scss';\n\nexport const App = () => {\n  const [personages, setPersonages] = useState([]);\n  const [selectedPersonage, setSelectedPersonage] = useState('');\n\n  useEffect(() => {\n    getPersonages()\n      .then(response => setPersonages(response.results))\n      .catch(() => setPersonages([]));\n  }, []);\n\n  const closeComments = () => {\n    setSelectedPersonage('');\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">\n        Personages List\n      </h1>\n\n      <div className=\"app__main-block\">\n        <PersonagesList\n          personages={personages}\n          selectedPersonage={selectedPersonage}\n          onPersonageSelected={name => setSelectedPersonage(name)}\n        />\n\n        <PersonageComments\n          selectedPersonage={selectedPersonage}\n          closeComments={closeComments}\n        />\n      </div>\n    </div>\n  );\n};\n","export const API_URL = 'https://swapi.dev/api/people/';\n\nexport const getPersonages = () => fetch(API_URL)\n  .then((result) => result.json())\n  .catch(err => alert(err.message))\n","import { App } from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}